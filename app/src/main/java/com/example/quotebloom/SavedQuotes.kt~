package com.example.quotebloom

import android.content.Context
import android.content.Intent
import android.util.Log
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.Card
import androidx.compose.material.FabPosition
import androidx.compose.material.FloatingActionButton
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Scaffold
import androidx.compose.material.Text
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Share
import androidx.compose.material.icons.filled.ThumbUp
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.firestore.FirebaseFirestore

data class QuoteData(
    val documentId: String,
    val quote: String,
    val author: String,
    val likes: Int = 0,
    val dislikes: Int = 0,
    val userLiked: Boolean = false,
    val userDisliked: Boolean = false
)

@Composable
fun SavedQuotes(navController: NavHostController, mAuth: FirebaseAuth) {
    val user = mAuth.currentUser
    val firestore = FirebaseFirestore.getInstance()
    val savedQuotes = remember { mutableStateOf<List<QuoteData>>(emptyList()) }

    LaunchedEffect(user, firestore) {
        if (user != null) {
            firestore.collection("users")
                .document(user.uid)
                .collection("savedQuotes")
                .addSnapshotListener { snapshot, e ->
                    if (e != null) {
                        Log.w("SavedQuotes", "Listen failed.", e)
                        return@addSnapshotListener
                    }

                    if (snapshot != null) {
                        val quotes = snapshot.documents.map { savedQuote ->
                            val quoteId = savedQuote.getString("quoteId") ?: ""
                            val userLiked = savedQuote.getBoolean("userLiked") ?: false
                            val userDisliked = savedQuote.getBoolean("userDisliked") ?: false

                            firestore.collection("quotes")
                                .document(quoteId)
                                .get()
                                .addOnSuccessListener { quoteSnapshot ->
                                    val quote = quoteSnapshot.getString("quote") ?: ""
                                    val author = quoteSnapshot.getString("author") ?: ""
                                    val likes = (quoteSnapshot.getLong("likes") ?: 0).toInt()
                                    val dislikes = (quoteSnapshot.getLong("dislikes") ?: 0).toInt()

                                    savedQuotes.value = savedQuotes.value + QuoteData(
                                        documentId = savedQuote.id,
                                        quote = quote,
                                        author = author,
                                        likes = likes,
                                        dislikes = dislikes,
                                        userLiked = userLiked,
                                        userDisliked = userDisliked
                                    )
                                }
                        }
                    } else {
                        Log.d("SavedQuotes", "Current data: null")
                    }
                }
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(text = "Saved Quotes")
                }
            )
        },
        floatingActionButtonPosition = FabPosition.End,
        floatingActionButton = {
            FloatingActionButton(
                onClick = { navController.navigate("addQuote") },
                backgroundColor = MaterialTheme.colors.primary
            ) {
                Icon(
                    imageVector = Icons.Default.Add,
                    contentDescription = "Add Quote"
                )
            }
        }
    ) {
        if (savedQuotes.value.isEmpty()) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = "No saved quotes",
                    style = MaterialTheme.typography.h6
                )
            }
        } else {
            LazyColumn(modifier = Modifier.padding(16.dp)) {
                items(savedQuotes.value, key = { it.documentId }) { quoteData ->
                    Card(
                        elevation = 4.dp,
                        backgroundColor = Color(0xFF232323),
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 8.dp)
                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Column(modifier = Modifier.weight(1f)) {
                                Text(
                                    text = quoteData.quote,
                                    style = MaterialTheme.typography.body1,
                                    color = Color.White
                                )
                                Spacer(modifier = Modifier.height(8.dp))
                                Text(
                                    text = " - ${quoteData.author}",
                                    style = MaterialTheme.typography.body2,
                                    color = Color.White,
                                    modifier = Modifier.align(Alignment.End)
                                )
                            }
                            Row(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(top = 16.dp),
                                horizontalArrangement = Arrangement.SpaceBetween
                            ) {
                                Row {
                                    Icon(
                                        imageVector = Icons.Default.ThumbUp,
                                        contentDescription = "Like",
                                        tint = if (quoteData.userLiked) Color.Green else Color.White
                                    )
                                    Text(
                                        text = "${quoteData.likes}",
                                        style = MaterialTheme.typography.body2,
                                        color = Color.White
                                    )
                                }
                                Row {
                                    Icon(
                                        imageVector = Icons.Default.ThumbDown,
                                        contentDescription = "Dislike",
                                        tint = if (quoteData.userDisliked) Color.Red else Color.White
                                    )
                                    Text(
                                        text = "${quoteData.dislikes}",
                                        style = MaterialTheme.typography.body2,
                                        color = Color.White
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun QuoteCard(quoteData: QuoteData, firestore: FirebaseFirestore, user: FirebaseUser?) {
    val context = LocalContext.current

    Card(
        elevation = 4.dp,
        backgroundColor = Color(0xFF232323),
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(text = quoteData.quote, style = MaterialTheme.typography.body1, color = Color.White)
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = " - ${quoteData.author}",
                style = MaterialTheme.typography.body2,
                color = Color.White,
                modifier = Modifier.align(Alignment.End)
            )

            Spacer(modifier = Modifier.height(16.dp))

            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween,
                modifier = Modifier.fillMaxWidth()
            ) {
                LikeDislikeButtons(quoteData, firestore, user)
                IconButton(onClick = {
                    shareQuote(context, quoteData.quote, quoteData.author)
                }) {
                    Icon(
                        imageVector = Icons.Default.Share,
                        contentDescription = "Share Quote",
                        tint = Color.White
                    )
                }
                IconButton(onClick = {
                    if (user != null) {
                        firestore.collection("users")
                            .document(user.uid)
                            .collection("savedQuotes")
                            .document(quoteData.documentId)
                            .delete()
                    }
                }) {
                    Icon(Icons.Default.Delete, contentDescription = "Delete Quote", tint = Color.White)
                }
            }
        }
    }
}

@Composable
fun LikeDislikeButtons(quoteData: QuoteData, firestore: FirebaseFirestore, user: FirebaseUser?) {
    Row {
        IconButton(onClick = {
            if (user != null) {
                val updatedLikes = if (quoteData.userLiked) quoteData.likes - 1 else quoteData.likes + 1
                val updatedDislikes = if (quoteData.userDisliked) quoteData.dislikes - 1 else quoteData.dislikes
                firestore.collection("users")
                    .document(user.uid)
                    .collection("savedQuotes")
                    .document(quoteData.documentId)
                    .update(
                        "likes", updatedLikes,
                        "userLiked", !quoteData.userLiked,
                        "dislikes", updatedDislikes,
                        "userDisliked", false
                    )
            }
        }) {
            Icon(
                imageVector = Icons.Default.ThumbUp,
                contentDescription = "Like",
                tint = if (quoteData.userLiked) Color.Blue else Color.White
            )
        }
        Text("${quoteData.likes}", color = Color.White)

        Spacer(modifier = Modifier.width(8.dp))

        IconButton(onClick = {
            if (user != null) {
                val updatedDislikes = if (quoteData.userDisliked) quoteData.dislikes - 1 else quoteData.dislikes + 1
                val updatedLikes = if (quoteData.userLiked) quoteData.likes - 1 else quoteData.likes
                firestore.collection("users")
                    .document(user.uid)
                    .collection("savedQuotes")
                    .document(quoteData.documentId)
                    .update(
                        "dislikes", updatedDislikes,
                        "userDisliked", !quoteData.userDisliked,
                        "likes", updatedLikes,
                        "userLiked", false
                    )
            }
        }) {
            Icon(
                imageVector = Icons.Default.ThumbUp,
                contentDescription = "Dislike",
                tint = if (quoteData.userDisliked) Color.Red else Color.White
            )
        }
        Text("${quoteData.dislikes}", color = Color.White)
    }
}

fun shareQuote(context: Context, quote: String, author: String) {
    val shareIntent = Intent().apply {
        action = Intent.ACTION_SEND
        putExtra(Intent.EXTRA_TEXT, "\"$quote\"\n\n— $author")
        type = "text/plain"
    }
    context.startActivity(
        Intent.createChooser(
            shareIntent,
            "Share Quote via"
        )
    )
}